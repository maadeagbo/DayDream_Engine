#version 430
layout (local_size_x = 1000) in;

layout ( std430, binding = 0 ) buffer Pos { vec4 Position[]; };
layout ( std430, binding = 1 ) buffer Vel { vec4 Velocity[]; };
layout ( std430, binding = 2 ) buffer Col { vec4 Color[]; };
layout ( std430, binding = 3 ) buffer Lif { float Life[]; };

uniform vec3 CenterPos;
uniform float angle;
uniform float radius;
uniform float deltaT;
uniform float EmitterDT;

uniform float Gravity1 = 10.0;
uniform float InvMassPtcl = 1.0 / 0.1;

uniform bool Halo = false;
uniform bool Fire = false;
uniform bool Water = false;
uniform bool Magic = false;

float rand(vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

void main() {
	uint _x = gl_GlobalInvocationID.x;
	
	if (Halo) {
		Position[_x] = vec4(Position[_x].x, 
						Position[_x].y + 10.0 * deltaT, 
						Position[_x].z, 
						Position[_x].w);
		Color[_x] = vec4(Color[_x].x, 
						Color[_x].y,
						Color[_x].z, 
						Color[_x].w);
		Life[_x] = Life[_x] - deltaT;
	}
	if (Fire) {
		// Calculate forces on point
		vec3 _pos = Position[_x].xyz;
		vec3 _vel = Velocity[_x].xyz;

		// ground outward force
		vec3 dist = CenterPos - _pos;
		vec3 F = (Gravity1 / length(dist)) * normalize(dist);
		
		// upward lift
		F += vec3(0.0, 5.0, 0.0);

		// attracting force 
		dist = _pos - CenterPos;
		F += ((1.0/InvMassPtcl) * vec3(-1000.0, 0.0, -1000.0 ) / length(dist)) * 
			normalize(dist);

		// Euler equation
		vec3 accel = F * InvMassPtcl;
		Position[_x] = vec4(_pos + _vel * deltaT + 0.5 * accel * deltaT * deltaT, 1.0);
		Velocity[_x] = vec4(_vel + accel * deltaT, 0.0);
		Color[_x] = vec4(Color[_x].x, 
						Color[_x].y,
						Color[_x].z, 
						Color[_x].w);
		Life[_x] = Life[_x] - deltaT;
	}
	if (Water) {
		// Calculate forces on point
		vec3 _pos = Position[_x].xyz;
		vec3 _vel = Velocity[_x].xyz;

		// Force of gravity 
		vec3 F = (1.0/InvMassPtcl) * vec3(0.0, -981.0, 0.0);

		// Euler equation
		vec3 accel = F * InvMassPtcl;
		Position[_x] = vec4(_pos + _vel * deltaT + 0.5 * accel * deltaT * deltaT, 1.0);
		Velocity[_x] = vec4(_vel + accel * deltaT, 0.0);
		Color[_x] = vec4(Color[_x].x, 
						Color[_x].y,
						Color[_x].z, 
						Color[_x].w);
		Life[_x] = Life[_x] - deltaT;
		
		// ground collision check
		float randNum = rand(vec2(Position[_x].xy));
		//float posNeg = step(0.5, randNum);
		//posNeg = mix(-1.0, 1.0, posNeg);

		float under = step(radius, Position[_x].y); // returns 0 if underground
		Position[_x].y = mix(radius, Position[_x].y, under);
		Velocity[_x].y = mix(Velocity[_x].y * -randNum * .5, Velocity[_x].y, under);
		Velocity[_x] *= mix(0.98, 1.0, under);
	}
	if (Magic) {
		// Calculate forces on point
		vec3 _pos = Position[_x].xyz;
		vec3 _vel = Velocity[_x].xyz;

		// pushing force 
		vec3 dist = _pos - CenterPos;
		vec3 F = ((1.0/InvMassPtcl) * vec3(5000.0, 0.0, 5000.0 ) / length(dist)) * 
			normalize(dist);

		// pulling force #1
		dist = (CenterPos + vec3(1000.0, 1000.0, 0.0)) - _pos;
		F += ((1.0/InvMassPtcl) * vec3(10000.0, 0.0, 10000.0 ) / length(dist)) * 
			normalize(dist);

		// Euler equation
		vec3 accel = F * InvMassPtcl;
		Position[_x] = vec4(_pos + _vel * deltaT + 0.5 * accel * deltaT * deltaT, 1.0);
		Velocity[_x] = vec4(_vel + accel * deltaT, 0.0);

		Life[_x] = Life[_x] - deltaT;

		float num1 = rand(vec2(_x, cos(radians(_x))) );
		float num2 = rand(vec2(num1, cos(radians(num1))) );

		Color[_x] = vec4(Color[_x].x * Life[_x] * 10.0 * num1, 
						Color[_x].y * Life[_x] * 10.0,
						Color[_x].z * Life[_x] * 2 * num1, 
						Color[_x].w);
	}
}
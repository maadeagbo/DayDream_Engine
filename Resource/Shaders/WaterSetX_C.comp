#version 430
layout (local_size_x = 10, local_size_y = 10) in;

layout ( std430, binding = 0 ) buffer PosIn { vec4 P_In[]; };
layout ( std430, binding = 1 ) buffer VelIn { vec4 V_In[]; };
layout ( std430, binding = 2 ) buffer MidXOut { vec4 MX_Out[]; };

uniform float Gravity;
uniform float deltaT;
uniform float xDist;

float sqr(float val) { return val * val; }

void main() {
    // Get number of point and current index in point array
	uvec3 total_p = gl_NumWorkGroups * gl_WorkGroupSize;
    const uint _x = gl_GlobalInvocationID.x;
    const uint _y = gl_GlobalInvocationID.y;

	const uint idx = _y * total_p.x + _x;
	uint i_x = (_y + 1) * total_p.x + _x;
    const float g = Gravity;

    if (_y < (total_p.y - 1)) {
        float h1x = P_In[i_x].y;
        float u1x = V_In[i_x].x;
        float h0 = P_In[idx].y;
        float u0 = V_In[idx].x;

        float ux, uz, midh;
        ux = (u0 + u1x) * 0.5 - (deltaT/(0.5 * xDist)) *
             (sqr(u1x)/h1x + 0.5 * g * sqr(h1x) - sqr(u0)/h0 - 0.5 * g * sqr(h0));
        midh = (h0 + h1x) * 0.5 - (deltaT * 0.5) * (u1x + u0)/xDist;

        MX_Out[idx] = vec4(ux, midh, idx, 1.f); // store calculated x values
    }
}
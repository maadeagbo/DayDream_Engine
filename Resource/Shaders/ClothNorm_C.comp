#version 430
layout (local_size_x = 10, local_size_y = 10) in;

layout ( std430, binding = 0 ) buffer Pos { vec4 Position[]; };
layout ( std430, binding = 1 ) buffer Nor { vec4 Normal[]; };

void main() {
	// Get number of particles and current index in particle array
	uvec3 totalParticles = gl_NumWorkGroups * gl_WorkGroupSize;
	uint currIndex = gl_GlobalInvocationID.y * totalParticles.x + gl_GlobalInvocationID.x;

	// check the 6 possible triangles around a vertex 
	vec3 vA, vB;
	vec3 norm = vec3(0.0);
	vec3 pos = Position[currIndex].xyz;
	
	// top 3 triangles
	if (gl_GlobalInvocationID.y < (totalParticles.y - 1)) {
		if (gl_GlobalInvocationID.x > 0) {
			// left
			vA = pos - Position[currIndex - 1].xyz;
			vB = Position[currIndex + totalParticles.x - 1].xyz - pos;
			norm += cross(vB, vA);
			// mid
			vA = pos - Position[currIndex + totalParticles.x - 1].xyz;
			vB = Position[currIndex + totalParticles.x].xyz - pos;
			norm += cross(vB, vA);
		}
		if (gl_GlobalInvocationID.x < (totalParticles.x - 1)) {
			// right
			vA = pos - Position[currIndex + totalParticles.x].xyz;
			vB = Position[currIndex + 1].xyz - pos;
			norm += cross(vB, vA);
		}
	}
	// bottom 3 triangles
	if (gl_GlobalInvocationID.y > 0) {
		if (gl_GlobalInvocationID.x > 0) {
			// left
			vA = Position[currIndex - 1].xyz - Position[currIndex - totalParticles.x].xyz;
			vB = pos - Position[currIndex - 1].xyz;
			norm += cross(vB, vA);
		}
		if (gl_GlobalInvocationID.x < (totalParticles.x - 1)) {
			// mid
			vA = Position[currIndex - totalParticles.x + 1].xyz - 
				Position[currIndex - totalParticles.x].xyz;
			vB = pos - Position[currIndex - totalParticles.x + 1].xyz;
			norm += cross(vB, vA);
			// right
			vA = pos - Position[currIndex + 1].xyz;
			vB = Position[currIndex - totalParticles.x + 1].xyz - pos;
			norm += cross(vB, vA);
		}
	}
	Normal[currIndex] = vec4(normalize(-norm), 0.0);
}